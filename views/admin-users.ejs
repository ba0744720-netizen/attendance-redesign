<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>User Management | PGP Admin</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
    }

    .container {
      max-width: 1400px;
      margin: 20px auto;
      padding: 20px;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: rgba(255, 255, 255, 0.95);
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .header h1 {
      color: #667eea;
      font-size: 24px;
    }

    .role-badge {
      background: #ff4757;
      color: white;
      padding: 5px 15px;
      border-radius: 20px;
      font-size: 12px;
      text-transform: uppercase;
      font-weight: 600;
    }

    .content-section {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .btn-primary { background: #667eea; color: white; }
    .btn-success { background: #28a745; color: white; }
    .btn-warning { background: #ffc107; color: #333; }
    .btn-danger { background: #dc3545; color: white; }
    
    .btn:hover { transform: translateY(-2px); }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }

    th {
      background: #f8f9fa;
      font-weight: 600;
      color: #667eea;
    }

    tr:hover { background: #f8f9fa; }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
    }

    .modal-content {
      background: white;
      margin: 5% auto;
      padding: 30px;
      width: 500px;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 600;
      color: #333;
    }

    .form-group input, .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 14px;
    }

    .form-group input:focus, .form-group select:focus {
      outline: none;
      border-color: #667eea;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <div>
        <h1>üë§ User Management</h1>
        <span class="role-badge">ADMIN</span>
      </div>
      <div>
        <button class="btn btn-primary" onclick="window.location.href='/admin'">‚Üê Back to Dashboard</button>
        <button class="btn btn-danger" onclick="logout()">Logout</button>
      </div>
    </div>

    <div class="content-section">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <h2>System Users</h2>
        <button class="btn btn-success" onclick="showAddModal()">+ Add User</button>
      </div>

      <table id="userTable">
        <thead>
          <tr>
            <th>Staff ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="userTableBody">
          <tr><td colspan="5" style="text-align: center;">Loading...</td></tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Add/Edit User Modal -->
  <div id="userModal" class="modal">
    <div class="modal-content">
      <h2 id="modalTitle">Add User</h2>
      <form id="userForm">
        <input type="hidden" id="userId" />
        
        <div class="form-group">
          <label>Staff ID</label>
          <input type="text" id="staffId" placeholder="e.g., TCH001" />
        </div>

        <div class="form-group">
          <label>Full Name *</label>
          <input type="text" id="userName" required placeholder="John Doe" />
        </div>

        <div class="form-group">
          <label>Email *</label>
          <input type="email" id="userEmail" required placeholder="user@pgp.com" />
        </div>

        <div class="form-group">
          <label>Password *</label>
          <input type="password" id="userPassword" placeholder="Leave blank to keep current" />
        </div>

        <div class="form-group">
          <label>Role *</label>
          <select id="userRole" required>
            <option value="teacher">Teacher</option>
            <option value="admin">Admin</option>
          </select>
        </div>

        <div style="display: flex; gap: 10px; margin-top: 20px;">
          <button type="submit" class="btn btn-primary" style="flex: 1;">Save</button>
          <button type="button" class="btn btn-danger" onclick="closeModal()" style="flex: 1;">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    const token = localStorage.getItem("authToken");
    const userRole = localStorage.getItem("userRole");

    if (!token || userRole !== "admin") {
      alert("Access denied. Admin only.");
      window.location.href = "/";
    }

    let allUsers = [];

    async function loadUsers() {
      try {
        const response = await fetch("/api/admin/users", {
          headers: { "Authorization": `Bearer ${token}` }
        });

        const result = await response.json();
        if (result.success) {
          allUsers = result.data;
          displayUsers(allUsers);
        } else {
          alert("Error loading users");
        }
      } catch (error) {
        console.error("Load error:", error);
        alert("Error loading users");
      }
    }

    function displayUsers(users) {
      const tbody = document.getElementById("userTableBody");
      
      if (users.length === 0) {
        tbody.innerHTML = '<tr><td colspan="5" style="text-align: center;">No users found</td></tr>';
        return;
      }

      tbody.innerHTML = "";
      users.forEach(user => {
        const roleColor = user.role === 'admin' ? '#ff4757' : '#667eea';
        const row = `
          <tr>
            <td><strong>${user.staffId || 'N/A'}</strong></td>
            <td>${user.name}</td>
            <td>${user.email}</td>
            <td><span style="background: ${roleColor}; color: white; padding: 5px 10px; border-radius: 5px; text-transform: uppercase; font-size: 12px;">${user.role}</span></td>
            <td>
              <button class="btn btn-warning" onclick="editUser(${user.id})">Edit</button>
              <button class="btn btn-danger" onclick="deleteUser(${user.id})">Delete</button>
            </td>
          </tr>
        `;
        tbody.innerHTML += row;
      });
    }

    function showAddModal() {
      document.getElementById("modalTitle").textContent = "Add User";
      document.getElementById("userForm").reset();
      document.getElementById("userId").value = "";
      document.getElementById("userPassword").placeholder = "Enter password";
      document.getElementById("userPassword").required = true;
      document.getElementById("userModal").style.display = "block";
    }

    async function editUser(id) {
      try {
        const response = await fetch(`/api/admin/users/${id}`, {
          headers: { "Authorization": `Bearer ${token}` }
        });

        const result = await response.json();
        if (result.success) {
          const user = result.data;
          document.getElementById("modalTitle").textContent = "Edit User";
          document.getElementById("userId").value = user.id;
          document.getElementById("staffId").value = user.staffId || '';
          document.getElementById("userName").value = user.name;
          document.getElementById("userEmail").value = user.email;
          document.getElementById("userRole").value = user.role;
          document.getElementById("userPassword").placeholder = "Leave blank to keep current";
          document.getElementById("userPassword").required = false;
          document.getElementById("userModal").style.display = "block";
        }
      } catch (error) {
        console.error("Edit error:", error);
        alert("Error loading user data");
      }
    }

    async function deleteUser(id) {
      if (!confirm("Are you sure you want to delete this user?")) {
        return;
      }

      try {
        const response = await fetch(`/api/admin/users/delete/${id}`, {
          method: "DELETE",
          headers: { "Authorization": `Bearer ${token}` }
        });

        const result = await response.json();
        if (result.success) {
          alert("User deleted successfully");
          loadUsers();
        } else {
          alert(result.message || "Error deleting user");
        }
      } catch (error) {
        console.error("Delete error:", error);
        alert("Error deleting user");
      }
    }

    document.getElementById("userForm").addEventListener("submit", async (e) => {
      e.preventDefault();

      const userId = document.getElementById("userId").value;
      const data = {
        staffId: document.getElementById("staffId").value,
        name: document.getElementById("userName").value,
        email: document.getElementById("userEmail").value,
        role: document.getElementById("userRole").value
      };

      const password = document.getElementById("userPassword").value;
      if (password) {
        data.password = password;
      }

      try {
        const url = userId ? `/api/admin/users/update/${userId}` : "/api/admin/users/create";
        const method = userId ? "PUT" : "POST";

        const response = await fetch(url, {
          method,
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
          alert(result.message);
          closeModal();
          loadUsers();
        } else {
          alert(result.message || "Error saving user");
        }
      } catch (error) {
        console.error("Save error:", error);
        alert("Error saving user");
      }
    });

    function closeModal() {
      document.getElementById("userModal").style.display = "none";
    }

    function logout() {
      localStorage.clear();
      window.location.href = "/";
    }

    // Load users on page load
    loadUsers();
  </script>
</body>
</html>