<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Timetable Management | PGP</title>
  <link rel="stylesheet" href="/css/style.css" />
  <style>
    .container { max-width: 1400px; margin: 20px auto; padding: 20px; }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: white;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .timetable-grid {
      display: grid;
      grid-template-columns: 100px repeat(5, 1fr);
      gap: 10px;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .period-cell {
      padding: 15px;
      border: 2px solid #eee;
      border-radius: 8px;
      min-height: 100px;
      cursor: pointer;
      transition: all 0.3s;
    }
    .period-cell:hover { box-shadow: 0 4px 12px rgba(0,0,0,0.15); }
    .period-cell.white { background: white; }
    .period-cell.green { background: #d4edda; border-color: #28a745; }
    .period-header {
      font-weight: bold;
      background: #007bff;
      color: white;
      padding: 15px;
      border-radius: 8px;
      text-align: center;
    }
    .btn { padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-weight: 600; }
    .btn-primary { background: #007bff; color: white; }
    .btn-success { background: #28a745; color: white; }
    .btn-danger { background: #dc3545; color: white; }
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
    }
    .modal-content {
      background: white;
      margin: 5% auto;
      padding: 30px;
      width: 500px;
      border-radius: 10px;
    }
    .form-group { margin-bottom: 15px; }
    .form-group label { display: block; margin-bottom: 5px; font-weight: 600; }
    .form-group input, .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <div>
        <h1>Timetable Management</h1>
        <span id="userRole" style="background: #007bff; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px;"></span>
      </div>
      <div>
        <button class="btn btn-success" onclick="showAddModal()">+ Add Period</button>
        <button class="btn btn-danger" onclick="logout()">Logout</button>
      </div>
    </div>

    <div class="timetable-grid" id="timetableGrid">
      <div class="period-header">Period</div>
      <div class="period-header">Monday</div>
      <div class="period-header">Tuesday</div>
      <div class="period-header">Wednesday</div>
      <div class="period-header">Thursday</div>
      <div class="period-header">Friday</div>
    </div>
  </div>

  <!-- Add/Edit Modal -->
  <div id="periodModal" class="modal">
    <div class="modal-content">
      <h2 id="modalTitle">Add Period</h2>
      <form id="periodForm">
        <div class="form-group">
          <label>Day</label>
          <select id="day" required>
            <option value="Monday">Monday</option>
            <option value="Tuesday">Tuesday</option>
            <option value="Wednesday">Wednesday</option>
            <option value="Thursday">Thursday</option>
            <option value="Friday">Friday</option>
          </select>
        </div>
        <div class="form-group">
          <label>Period Number</label>
          <input type="number" id="periodNumber" min="1" max="8" required />
        </div>
        <div class="form-group">
          <label>Subject</label>
          <input type="text" id="subject" required />
        </div>
        <div class="form-group">
          <label>Class</label>
          <input type="text" id="className" placeholder="CSE-A" required />
        </div>
        <div class="form-group">
          <label>Teacher</label>
          <select id="teacherId" required>
            <option value="">Select Teacher</option>
          </select>
        </div>
        <div class="form-group">
          <label>Start Time</label>
          <input type="time" id="startTime" required />
        </div>
        <div class="form-group">
          <label>End Time</label>
          <input type="time" id="endTime" required />
        </div>
        <div style="display: flex; gap: 10px; margin-top: 20px;">
          <button type="submit" class="btn btn-primary" style="flex: 1;">Save</button>
          <button type="button" class="btn btn-danger" onclick="closeModal()" style="flex: 1;">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    const token = localStorage.getItem("token");
    const userRole = localStorage.getItem("userRole");

    if (!token || (userRole !== "hod" && userRole !== "principal")) {
      alert("Access denied. HOD only.");
      window.location.href = "/";
    }

    document.getElementById("userRole").textContent = userRole.toUpperCase();

    let timetables = [];
    let teachers = [];

    async function loadData() {
      try {
        // Load teachers
        const teacherRes = await fetch("/dashboard", {
          headers: { "Authorization": `Bearer ${token}` }
        });
        const teacherData = await teacherRes.json();
        
        // Load all users for teacher dropdown
        const usersRes = await fetch("/auth/users", {
          headers: { "Authorization": `Bearer ${token}` }
        });
        
        // For now, use demo - you can create a proper endpoint later
        teachers = [
          { id: 4, name: "Teacher John" },
          { id: 2, name: "HOD Engineering" }
        ];

        const teacherSelect = document.getElementById("teacherId");
        teacherSelect.innerHTML = '<option value="">Select Teacher</option>';
        teachers.forEach(t => {
          teacherSelect.innerHTML += `<option value="${t.id}">${t.name}</option>`;
        });

        // Load timetables
        const ttRes = await fetch("/timetable", {
          headers: { "Authorization": `Bearer ${token}` }
        });
        const ttData = await ttRes.json();
        timetables = ttData.data || [];

        renderTimetable();
      } catch (error) {
        console.error("Load error:", error);
      }
    }

    function renderTimetable() {
      const grid = document.getElementById("timetableGrid");
      const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
      const periods = 8;

      // Clear existing (keep headers)
      while (grid.children.length > 6) {
        grid.removeChild(grid.lastChild);
      }

      for (let p = 1; p <= periods; p++) {
        // Period label
        const label = document.createElement("div");
        label.className = "period-header";
        label.textContent = `Period ${p}`;
        grid.appendChild(label);

        days.forEach(day => {
          const cell = document.createElement("div");
          cell.className = "period-cell white";
          
          const period = timetables.find(t => t.day === day && t.periodNumber === p);
          
          if (period) {
            cell.className = "period-cell " + (period.color || "green");
            cell.innerHTML = `
              <strong>${period.subject}</strong><br>
              <small>${period.className}</small><br>
              <small>${period.teacher?.name || 'TBA'}</small><br>
              <small>${period.startTime} - ${period.endTime}</small>
              <br><button class="btn btn-danger" style="margin-top: 5px; padding: 5px 10px; font-size: 12px;" onclick="deletePeriod(${period.id})">Delete</button>
            `;
          } else {
            cell.innerHTML = `<small style="color: #999;">Empty</small>`;
            cell.onclick = () => showAddModal(day, p);
          }

          grid.appendChild(cell);
        });
      }
    }

    function showAddModal(day = "", period = 1) {
      document.getElementById("modalTitle").textContent = "Add Period";
      document.getElementById("periodForm").reset();
      if (day) document.getElementById("day").value = day;
      if (period) document.getElementById("periodNumber").value = period;
      document.getElementById("periodModal").style.display = "block";
    }

    function closeModal() {
      document.getElementById("periodModal").style.display = "none";
    }

    document.getElementById("periodForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      
      const data = {
        day: document.getElementById("day").value,
        periodNumber: parseInt(document.getElementById("periodNumber").value),
        subject: document.getElementById("subject").value,
        className: document.getElementById("className").value,
        teacherId: parseInt(document.getElementById("teacherId").value),
        startTime: document.getElementById("startTime").value,
        endTime: document.getElementById("endTime").value,
        color: "green"
      };

      try {
        const res = await fetch("/timetable/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify(data)
        });

        const result = await res.json();
        if (result.success) {
          alert("Period added successfully!");
          closeModal();
          loadData();
        } else {
          alert(result.message);
        }
      } catch (error) {
        console.error("Create error:", error);
        alert("Error creating period");
      }
    });

    async function deletePeriod(id) {
      if (!confirm("Delete this period?")) return;

      try {
        const res = await fetch(`/timetable/delete/${id}`, {
          method: "DELETE",
          headers: { "Authorization": `Bearer ${token}` }
        });

        const result = await res.json();
        if (result.success) {
          alert("Period deleted");
          loadData();
        }
      } catch (error) {
        console.error("Delete error:", error);
      }
    }

    function logout() {
      localStorage.clear();
      window.location.href = "/";
    }

    loadData();
  </script>
</body>
</html>