<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Student Management | PGP</title>
  <link rel="stylesheet" href="/css/style.css" />
  <style>
    .container {
      max-width: 1400px;
      margin: 20px auto;
      padding: 20px;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: white;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .role-badge {
      background: #007bff;
      color: white;
      padding: 5px 15px;
      border-radius: 20px;
      font-size: 12px;
      text-transform: uppercase;
    }
    .content-section {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .search-bar {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    .search-bar input {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 14px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }
    th {
      background: #f8f9fa;
      font-weight: 600;
    }
    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
    }
    .btn-primary { background: #007bff; color: white; }
    .btn-success { background: #28a745; color: white; }
    .btn-warning { background: #ffc107; color: #333; }
    .btn-danger { background: #dc3545; color: white; }
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
    }
    .modal-content {
      background: white;
      margin: 5% auto;
      padding: 30px;
      width: 500px;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    }
    .form-group {
      margin-bottom: 15px;
    }
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 600;
      color: #333;
    }
    .form-group input, .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 14px;
    }
    .form-buttons {
      display: flex;
      gap: 10px;
      margin-top: 20px;
    }
    .stats {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
    }
    .stat-box {
      flex: 1;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
    }
    .stat-box h3 {
      margin: 0;
      font-size: 14px;
      opacity: 0.9;
    }
    .stat-box .number {
      font-size: 36px;
      font-weight: bold;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <div>
        <h1>Student Management</h1>
        <span class="role-badge" id="userRole"></span>
      </div>
      <div>
        <button class="btn btn-primary" onclick="window.location.href='/role-dashboard.html'">‚Üê Back to Dashboard</button>
        <button class="btn btn-danger" onclick="logout()">Logout</button>
      </div>
    </div>

    <div class="stats">
      <div class="stat-box">
        <h3>Total Students</h3>
        <div class="number" id="totalStudents">0</div>
      </div>
      <div class="stat-box" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
        <h3>Total Classes</h3>
        <div class="number" id="totalClasses">0</div>
      </div>
    </div>

    <div class="content-section">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <h2>Student List</h2>
        <button class="btn btn-success" onclick="showAddModal()">+ Add Student</button>
      </div>

      <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Search by name or roll number..." onkeyup="filterStudents()" />
        <select id="classFilter" onchange="filterStudents()">
          <option value="">All Classes</option>
        </select>
      </div>

      <table id="studentTable">
        <thead>
          <tr>
            <th>Roll Number</th>
            <th>Name</th>
            <th>Class</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="studentTableBody">
          <tr><td colspan="4" style="text-align: center;">Loading...</td></tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Add/Edit Student Modal -->
  <div id="studentModal" class="modal">
    <div class="modal-content">
      <h2 id="modalTitle">Add Student</h2>
      <form id="studentForm">
        <input type="hidden" id="studentId" />
        
        <div class="form-group">
          <label>Full Name *</label>
          <input type="text" id="studentName" required placeholder="John Doe" />
        </div>

        <div class="form-group">
          <label>Roll Number *</label>
          <input type="text" id="rollNumber" required placeholder="A001" />
        </div>

        <div class="form-group">
          <label>Class *</label>
          <input type="text" id="className" required placeholder="CSE-A" />
        </div>

        <div class="form-buttons">
          <button type="submit" class="btn btn-primary" style="flex: 1;">Save</button>
          <button type="button" class="btn btn-danger" onclick="closeModal()" style="flex: 1;">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    const token = localStorage.getItem("token");
    const userRole = localStorage.getItem("userRole");

    if (!token || (userRole !== "advisor" && userRole !== "principal")) {
      alert("Access denied. Class Advisor or Principal only.");
      window.location.href = "/";
    }

    document.getElementById("userRole").textContent = userRole.toUpperCase();

    let allStudents = [];

    async function loadStudents() {
      try {
        const response = await fetch("/students", {
          headers: { "Authorization": `Bearer ${token}` }
        });

        const result = await response.json();
        if (result.success) {
          allStudents = result.data;
          displayStudents(allStudents);
          updateStats();
        } else {
          alert("Error loading students");
        }
      } catch (error) {
        console.error("Load error:", error);
        alert("Error loading students");
      }
    }

    function displayStudents(students) {
      const tbody = document.getElementById("studentTableBody");
      
      if (students.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" style="text-align: center;">No students found</td></tr>';
        return;
      }

      tbody.innerHTML = "";
      students.forEach(student => {
        const row = `
          <tr>
            <td><strong>${student.rollNumber}</strong></td>
            <td>${student.name}</td>
            <td><span style="background: #e3f2fd; padding: 5px 10px; border-radius: 5px;">${student.class}</span></td>
            <td>
              <button class="btn btn-warning" onclick="editStudent(${student.id})">Edit</button>
              <button class="btn btn-danger" onclick="deleteStudent(${student.id})">Delete</button>
            </td>
          </tr>
        `;
        tbody.innerHTML += row;
      });
    }

    function updateStats() {
      document.getElementById("totalStudents").textContent = allStudents.length;
      
      const uniqueClasses = [...new Set(allStudents.map(s => s.class))];
      document.getElementById("totalClasses").textContent = uniqueClasses.length;

      // Update class filter dropdown
      const classFilter = document.getElementById("classFilter");
      classFilter.innerHTML = '<option value="">All Classes</option>';
      uniqueClasses.forEach(className => {
        classFilter.innerHTML += `<option value="${className}">${className}</option>`;
      });
    }

    function filterStudents() {
      const searchText = document.getElementById("searchInput").value.toLowerCase();
      const classFilter = document.getElementById("classFilter").value;

      const filtered = allStudents.filter(student => {
        const matchesSearch = student.name.toLowerCase().includes(searchText) || 
                              student.rollNumber.toLowerCase().includes(searchText);
        const matchesClass = !classFilter || student.class === classFilter;
        return matchesSearch && matchesClass;
      });

      displayStudents(filtered);
    }

    function showAddModal() {
      document.getElementById("modalTitle").textContent = "Add Student";
      document.getElementById("studentForm").reset();
      document.getElementById("studentId").value = "";
      document.getElementById("studentModal").style.display = "block";
    }

    async function editStudent(id) {
      try {
        const response = await fetch(`/students/${id}`, {
          headers: { "Authorization": `Bearer ${token}` }
        });

        const result = await response.json();
        if (result.success) {
          const student = result.data;
          document.getElementById("modalTitle").textContent = "Edit Student";
          document.getElementById("studentId").value = student.id;
          document.getElementById("studentName").value = student.name;
          document.getElementById("rollNumber").value = student.rollNumber;
          document.getElementById("className").value = student.class;
          document.getElementById("studentModal").style.display = "block";
        }
      } catch (error) {
        console.error("Edit error:", error);
        alert("Error loading student data");
      }
    }

    async function deleteStudent(id) {
      if (!confirm("Are you sure you want to delete this student? This will also delete their attendance records.")) {
        return;
      }

      try {
        const response = await fetch(`/students/delete/${id}`, {
          method: "DELETE",
          headers: { "Authorization": `Bearer ${token}` }
        });

        const result = await response.json();
        if (result.success) {
          alert("Student deleted successfully");
          loadStudents();
        } else {
          alert(result.message || "Error deleting student");
        }
      } catch (error) {
        console.error("Delete error:", error);
        alert("Error deleting student");
      }
    }

    document.getElementById("studentForm").addEventListener("submit", async (e) => {
      e.preventDefault();

      const studentId = document.getElementById("studentId").value;
      const data = {
        name: document.getElementById("studentName").value,
        rollNumber: document.getElementById("rollNumber").value,
        className: document.getElementById("className").value
      };

      try {
        const url = studentId ? `/students/update/${studentId}` : "/students/create";
        const method = studentId ? "PUT" : "POST";

        const response = await fetch(url, {
          method,
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();
        if (result.success) {
          alert(result.message);
          closeModal();
          loadStudents();
        } else {
          alert(result.message || "Error saving student");
        }
      } catch (error) {
        console.error("Save error:", error);
        alert("Error saving student");
      }
    });

    function closeModal() {
      document.getElementById("studentModal").style.display = "none";
    }

    function logout() {
      localStorage.clear();
      window.location.href = "/";
    }

    // Load students on page load
    loadStudents();
  </script>
</body>
</html>