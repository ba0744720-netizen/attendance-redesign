import React, { useState, useEffect } from 'react';
import { Search, Filter, CheckCircle, XCircle, Send } from 'lucide-react';

const AttendanceMarkingSystem = () => {
  const [filters, setFilters] = useState({
    course: '',
    year: '',
    branch: ''
  });
  
  const [students, setStudents] = useState([]);
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [attendance, setAttendance] = useState({});
  const [searchTerm, setSearchTerm] = useState('');
  const [showFilters, setShowFilters] = useState(true);

  // Sample data - Replace with actual API call
  const sampleStudents = [
    { id: 1, name: "Arun Kumar", rollNo: "21CS001", branch: "CSE", year: "III", course: "B.Tech", initial: "A" },
    { id: 2, name: "Bala Krishnan", rollNo: "21ME015", branch: "MECH", year: "III", course: "B.Tech", initial: "B" },
    { id: 3, name: "Chitra Devi", rollNo: "21EC023", branch: "ECE", year: "II", course: "B.E", initial: "C" },
    { id: 4, name: "Dinesh Raja", rollNo: "21CV008", branch: "CIVIL", year: "IV", course: "B.Tech", initial: "D" },
    { id: 5, name: "Eswari Selvi", rollNo: "21BM012", branch: "BME", year: "I", course: "B.E", initial: "E" },
    { id: 6, name: "Ganesh Babu", rollNo: "21CS045", branch: "CSE", year: "II", course: "B.Tech", initial: "G" },
    { id: 7, name: "Harini Priya", rollNo: "21ME028", branch: "MECH", year: "III", course: "B.E", initial: "H" },
    { id: 8, name: "Iniya Lakshmi", rollNo: "21EC019", branch: "ECE", year: "I", course: "B.Tech", initial: "I" },
  ];

  useEffect(() => {
    // Simulate API call
    setStudents(sampleStudents);
    setFilteredStudents(sampleStudents);
  }, []);

  const handleFilterChange = (field, value) => {
    setFilters(prev => ({ ...prev, [field]: value }));
  };

  const applyFilters = () => {
    let filtered = [...students];

    if (filters.course) {
      filtered = filtered.filter(s => s.course === filters.course);
    }
    if (filters.year) {
      filtered = filtered.filter(s => s.year === filters.year);
    }
    if (filters.branch) {
      filtered = filtered.filter(s => s.branch === filters.branch);
    }
    if (searchTerm) {
      filtered = filtered.filter(s => 
        s.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        s.rollNo.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Sort by name (ascending)
    filtered.sort((a, b) => a.name.localeCompare(b.name));

    setFilteredStudents(filtered);
    setShowFilters(false);
  };

  const resetFilters = () => {
    setFilters({ course: '', year: '', branch: '' });
    setSearchTerm('');
    setFilteredStudents(students);
  };

  const markAttendance = (studentId, status) => {
    setAttendance(prev => ({
      ...prev,
      [studentId]: status
    }));
  };

  const handleSubmit = () => {
    const attendanceData = filteredStudents.map(student => ({
      studentId: student.id,
      name: student.name,
      rollNo: student.rollNo,
      status: attendance[student.id] || 'Not Marked',
      date: new Date().toISOString().split('T')[0]
    }));

    const unmarked = attendanceData.filter(a => a.status === 'Not Marked');
    
    if (unmarked.length > 0) {
      const confirm = window.confirm(
        `${unmarked.length} student(s) attendance not marked. Submit anyway?`
      );
      if (!confirm) return;
    }

    console.log('Submitting attendance:', attendanceData);
    alert('✅ Attendance submitted successfully!\n\nCheck Reports section to view.');
    
    // Reset attendance after submission
    setAttendance({});
  };

  const presentCount = Object.values(attendance).filter(s => s === 'Present').length;
  const absentCount = Object.values(attendance).filter(s => s === 'Absent').length;
  const markedCount = presentCount + absentCount;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-indigo-900">Mark Attendance</h1>
              <p className="text-gray-600 mt-1">
                {new Date().toLocaleDateString('en-IN', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </p>
            </div>
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-all"
            >
              <Filter size={20} />
              {showFilters ? 'Hide Filters' : 'Show Filters'}
            </button>
          </div>
        </div>

        {/* Filters Section */}
        {showFilters && (
          <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Filter Students</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Course
                </label>
                <select
                  value={filters.course}
                  onChange={(e) => handleFilterChange('course', e.target.value)}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-indigo-500 focus:outline-none"
                >
                  <option value="">All Courses</option>
                  <option value="B.E">B.E</option>
                  <option value="B.Tech">B.Tech</option>
                  <option value="M.E">M.E</option>
                  <option value="M.Tech">M.Tech</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Year
                </label>
                <select
                  value={filters.year}
                  onChange={(e) => handleFilterChange('year', e.target.value)}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-indigo-500 focus:outline-none"
                >
                  <option value="">All Years</option>
                  <option value="I">I Year</option>
                  <option value="II">II Year</option>
                  <option value="III">III Year</option>
                  <option value="IV">IV Year</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  Branch
                </label>
                <select
                  value={filters.branch}
                  onChange={(e) => handleFilterChange('branch', e.target.value)}
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-indigo-500 focus:outline-none"
                >
                  <option value="">All Branches</option>
                  <option value="CSE">CSE - Computer Science</option>
                  <option value="ECE">ECE - Electronics</option>
                  <option value="MECH">MECH - Mechanical</option>
                  <option value="CIVIL">CIVIL - Civil</option>
                  <option value="BME">BME - Biomedical</option>
                  <option value="EEE">EEE - Electrical</option>
                </select>
              </div>
            </div>

            <div className="mb-4">
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Search by Name or Roll Number
              </label>
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Search students..."
                  className="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:border-indigo-500 focus:outline-none"
                />
              </div>
            </div>

            <div className="flex gap-3">
              <button
                onClick={applyFilters}
                className="flex-1 bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 rounded-xl font-semibold hover:shadow-lg transition-all"
              >
                Filter Now
              </button>
              <button
                onClick={resetFilters}
                className="px-6 bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-all"
              >
                Reset
              </button>
            </div>
          </div>
        )}

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-xl shadow p-4">
            <div className="text-sm text-gray-600">Total Students</div>
            <div className="text-2xl font-bold text-indigo-600">{filteredStudents.length}</div>
          </div>
          <div className="bg-white rounded-xl shadow p-4">
            <div className="text-sm text-gray-600">Marked</div>
            <div className="text-2xl font-bold text-blue-600">{markedCount}</div>
          </div>
          <div className="bg-white rounded-xl shadow p-4">
            <div className="text-sm text-gray-600">Present</div>
            <div className="text-2xl font-bold text-green-600">{presentCount}</div>
          </div>
          <div className="bg-white rounded-xl shadow p-4">
            <div className="text-sm text-gray-600">Absent</div>
            <div className="text-2xl font-bold text-red-600">{absentCount}</div>
          </div>
        </div>

        {/* Students List */}
        <div className="bg-white rounded-2xl shadow-lg overflow-hidden mb-6">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white">
                  <th className="px-6 py-4 text-left font-bold">Name</th>
                  <th className="px-6 py-4 text-left font-bold">Roll Number</th>
                  <th className="px-6 py-4 text-left font-bold">Branch</th>
                  <th className="px-6 py-4 text-center font-bold">Attendance</th>
                </tr>
              </thead>
              <tbody>
                {filteredStudents.length === 0 ? (
                  <tr>
                    <td colSpan="4" className="px-6 py-12 text-center text-gray-500">
                      No students found. Try adjusting your filters.
                    </td>
                  </tr>
                ) : (
                  filteredStudents.map((student) => (
                    <tr 
                      key={student.id} 
                      className="border-b border-gray-100 hover:bg-indigo-50 transition-colors"
                    >
                      <td className="px-6 py-4">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 rounded-full bg-indigo-600 text-white flex items-center justify-center font-bold">
                            {student.initial}
                          </div>
                          <div>
                            <div className="font-semibold text-gray-900">{student.name}</div>
                            <div className="text-sm text-gray-500">{student.year} Year • {student.course}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <span className="font-mono font-semibold text-gray-700">
                          {student.rollNo}
                        </span>
                      </td>
                      <td className="px-6 py-4">
                        <span className="inline-block px-3 py-1 bg-indigo-100 text-indigo-700 rounded-lg font-semibold text-sm">
                          {student.branch}
                        </span>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex gap-2 justify-center">
                          <button
                            onClick={() => markAttendance(student.id, 'Present')}
                            className={`flex items-center gap-2 px-4 py-2 rounded-lg font-semibold transition-all ${
                              attendance[student.id] === 'Present'
                                ? 'bg-green-600 text-white shadow-lg scale-105'
                                : 'bg-green-100 text-green-700 hover:bg-green-200'
                            }`}
                          >
                            <CheckCircle size={18} />
                            Present
                          </button>
                          <button
                            onClick={() => markAttendance(student.id, 'Absent')}
                            className={`flex items-center gap-2 px-4 py-2 rounded-lg font-semibold transition-all ${
                              attendance[student.id] === 'Absent'
                                ? 'bg-red-600 text-white shadow-lg scale-105'
                                : 'bg-red-100 text-red-700 hover:bg-red-200'
                            }`}
                          >
                            <XCircle size={18} />
                            Absent
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Submit Button */}
        {filteredStudents.length > 0 && (
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h3 className="text-lg font-semibold text-gray-800">
                  Ready to Submit?
                </h3>
                <p className="text-sm text-gray-600">
                  {markedCount} of {filteredStudents.length} students marked
                </p>
              </div>
              <button
                onClick={handleSubmit}
                disabled={markedCount === 0}
                className={`flex items-center gap-2 px-8 py-4 rounded-xl font-bold text-lg transition-all ${
                  markedCount === 0
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:shadow-xl hover:scale-105'
                }`}
              >
                <Send size={24} />
                Submit Attendance
              </button>
            </div>
            
            {markedCount < filteredStudents.length && markedCount > 0 && (
              <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded">
                <p className="text-sm text-yellow-800">
                  ⚠️ Warning: {filteredStudents.length - markedCount} student(s) attendance not marked yet.
                </p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default AttendanceMarkingSystem;