<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard | PGP</title>
  <link rel="stylesheet" href="/css/style.css" />
  <style>
    .dashboard-container {
      max-width: 1200px;
      margin: 20px auto;
      padding: 20px;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      padding: 20px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .header-buttons {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .stat-card h3 {
      margin: 0 0 10px 0;
      color: #666;
      font-size: 14px;
    }
    .stat-card .number {
      font-size: 36px;
      font-weight: bold;
      color: #007bff;
    }
    .role-badge {
      background: #007bff;
      color: white;
      padding: 5px 15px;
      border-radius: 20px;
      font-size: 12px;
      text-transform: uppercase;
    }
    .content-section {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }
    th {
      background: #f8f9fa;
      font-weight: 600;
    }
    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
    }
    .btn-primary { background: #007bff; color: white; }
    .btn-success { background: #28a745; color: white; }
    .btn-danger { background: #dc3545; color: white; }
    .btn-info { background: #17a2b8; color: white; }
    .logout-btn {
      background: #dc3545;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="dashboard-container">
    <div class="header">
      <div>
        <h1 id="userName">Loading...</h1>
        <span class="role-badge" id="userRole"></span>
      </div>
      <div class="header-buttons">
        <!-- Timetable Button (HOD/Principal only) -->
        <button id="timetableBtn" class="btn btn-info" onclick="window.location.href='/timetable-management'" style="display: none;">
          ðŸ“… Manage Timetable
        </button>
        <!-- Student Management Button (Advisor/Principal only) -->
        <button id="studentMgmtBtn" class="btn btn-primary" onclick="window.location.href='/student-management'" style="display: none;">
          ðŸ‘¥ Manage Students
        </button>
        <!-- Reports Button (Principal/HOD/Advisor only) -->
        <button id="reportsBtn" class="btn btn-success" onclick="window.location.href='/reports-page'" style="display: none;">
          ðŸ“Š Reports
        </button>
        <!-- View My Schedule (Teacher only) -->
        <button id="myScheduleBtn" class="btn btn-info" onclick="viewMySchedule()" style="display: none;">
          ðŸ“‹ My Schedule
        </button>
        <button class="logout-btn" onclick="logout()">Logout</button>
      </div>
    </div>

    <!-- Stats Section (Principal/HOD only) -->
    <div id="statsSection" style="display: none;">
      <div class="stats-grid">
        <div class="stat-card">
          <h3>Total Students</h3>
          <div class="number" id="totalStudents">0</div>
        </div>
        <div class="stat-card">
          <h3>Today's Attendance</h3>
          <div class="number" id="todayAttendance">0</div>
        </div>
        <div class="stat-card">
          <h3>Attendance Rate</h3>
          <div class="number" id="attendanceRate">0%</div>
        </div>
      </div>
    </div>

    <!-- Student List & Attendance Section -->
    <div class="content-section">
      <h2>Mark Attendance</h2>
      <form id="attendanceForm">
        <select id="studentId" required>
          <option value="">Select Student</option>
        </select>
        <select id="status" required>
          <option value="Present">Present</option>
          <option value="Absent">Absent</option>
        </select>
        <button type="submit" class="btn btn-primary">Mark Attendance</button>
      </form>

      <h3 style="margin-top: 30px;">Student List</h3>
      <table id="studentTable">
        <thead>
          <tr>
            <th>Roll Number</th>
            <th>Name</th>
            <th>Class</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="studentTableBody">
          <tr><td colspan="4">Loading...</td></tr>
        </tbody>
      </table>
    </div>
  </div>

  <script>
    const token = localStorage.getItem("token");
    const userName = localStorage.getItem("userName");
    const userRole = localStorage.getItem("userRole");

    if (!token) {
      window.location.href = "/";
    }

    document.getElementById("userName").textContent = userName || "User";
    document.getElementById("userRole").textContent = userRole || "role";

    // Show role-specific buttons
    if (userRole === "hod" || userRole === "principal") {
      document.getElementById("timetableBtn").style.display = "inline-block";
    }
    if (userRole === "advisor" || userRole === "principal") {
      document.getElementById("studentMgmtBtn").style.display = "inline-block";
    }
    // Show reports button for principal/hod/advisor
    if (userRole === "principal" || userRole === "hod" || userRole === "advisor") {
      document.getElementById("reportsBtn").style.display = "inline-block";
    }
    if (userRole === "teacher") {
      document.getElementById("myScheduleBtn").style.display = "inline-block";
    }

    // Load dashboard data
    async function loadDashboard() {
      try {
        const response = await fetch("/dashboard", {
          headers: {
            "Authorization": `Bearer ${token}`
          }
        });

        const result = await response.json();
        if (!result.success) {
          alert("Session expired. Please login again.");
          logout();
          return;
        }

        const { data } = result;

        // Show stats for principal/hod
        if (data.stats && Object.keys(data.stats).length > 0) {
          document.getElementById("statsSection").style.display = "block";
          document.getElementById("totalStudents").textContent = data.stats.totalStudents;
          document.getElementById("todayAttendance").textContent = data.stats.todayAttendance;
          document.getElementById("attendanceRate").textContent = data.stats.attendanceRate + "%";
        }

        // Populate student dropdown
        const studentSelect = document.getElementById("studentId");
        studentSelect.innerHTML = '<option value="">Select Student</option>';
        data.students.forEach(student => {
          const option = document.createElement("option");
          option.value = student.id;
          option.textContent = `${student.name} (${student.rollNumber})`;
          studentSelect.appendChild(option);
        });

        // Populate student table
        const tbody = document.getElementById("studentTableBody");
        tbody.innerHTML = "";
        data.students.forEach(student => {
          const row = `
            <tr>
              <td>${student.rollNumber}</td>
              <td>${student.name}</td>
              <td>${student.class}</td>
              <td>
                <button class="btn btn-success" onclick="markPresent(${student.id})">Present</button>
                <button class="btn btn-danger" onclick="markAbsent(${student.id})">Absent</button>
              </td>
            </tr>
          `;
          tbody.innerHTML += row;
        });

      } catch (error) {
        console.error("Error loading dashboard:", error);
        alert("Error loading dashboard");
      }
    }

    // Mark attendance via form
    document.getElementById("attendanceForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const studentId = document.getElementById("studentId").value;
      const status = document.getElementById("status").value;

      await markAttendance(studentId, status);
    });

    // Quick mark functions
    async function markPresent(studentId) {
      await markAttendance(studentId, "Present");
    }

    async function markAbsent(studentId) {
      await markAttendance(studentId, "Absent");
    }

    async function markAttendance(studentId, status) {
      try {
        const response = await fetch("/attendance/mark", {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`
          },
          body: JSON.stringify({ studentId, status }),
        });

        const data = await response.json();
        
        if (data.success) {
          alert(data.message);
          loadDashboard(); // Reload stats
        } else {
          alert(data.message || "Error marking attendance");
        }
      } catch (error) {
        console.error("Error marking attendance:", error);
        alert("Error marking attendance");
      }
    }

    async function viewMySchedule() {
      try {
        const response = await fetch("/timetable/my-schedule", {
          headers: {
            "Authorization": `Bearer ${token}`
          }
        });

        const result = await response.json();
        if (result.success) {
          let scheduleText = "ðŸ“… Your Weekly Schedule:\n\n";
          if (result.data.length === 0) {
            scheduleText += "No periods assigned yet.";
          } else {
            result.data.forEach(period => {
              scheduleText += `${period.day} - Period ${period.periodNumber}\n`;
              scheduleText += `${period.subject} (${period.className})\n`;
              scheduleText += `${period.startTime} - ${period.endTime}\n\n`;
            });
          }
          alert(scheduleText);
        }
      } catch (error) {
        console.error("Error fetching schedule:", error);
        alert("Error loading schedule");
      }
    }

    function logout() {
      localStorage.clear();
      window.location.href = "/";
    }

    // Load on page load
    loadDashboard();
  </script>
</body>
</html>